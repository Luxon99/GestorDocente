/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gestion_docente.visual;

import gestion_docente.visual.EvaluationVisual.EvaluationsVisual;
import gestion_docente.dto.EvaluationDTO;
import gestion_docente.dto.SubjectDTO;
import gestion_docente.services.EvaluationServices;
import gestion_docente.services.ServicesLocator;
import gestion_docente.services.StudentServices;
import gestion_docente.services.SubjectServices;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author César
 */
public class SubjectsVisual extends javax.swing.JPanel {

    /**
     * Creates new form SignaturesVisual
     */
    public SubjectsVisual() {
        initComponents();
        cargarSubjs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectsTable = new javax.swing.JTable();

        jButton3.setText("Insertar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Eliminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Modificar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        subjectsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Hours", "Year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(subjectsTable);
        if (subjectsTable.getColumnModel().getColumnCount() > 0) {
            subjectsTable.getColumnModel().getColumn(0).setResizable(false);
            subjectsTable.getColumnModel().getColumn(1).setResizable(false);
            subjectsTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
private void cargarSubjs() {
        SubjectServices ay = ServicesLocator.getSubjectServices();

        try {
            ArrayList<SubjectDTO> listDTO = ay.getAllSubjects();
            subjectsTable.setModel(new DefaultTableModel(subjsToMatriz(listDTO),
                    new String[]{"Nombre", "Horas", "Año"}));
        } catch (SQLException ex) {
            Logger.getLogger(AcademicsYearsVisual.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EvaluationsVisual.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Object[][] subjsToMatriz(ArrayList<SubjectDTO> datos) throws SQLException {
        // Convierte el ArrayList a Object[][]
        Object[][] objectArray = new Object[datos.size()][3];

        for (int i = 0; i < datos.size(); i++) {
            for (int j = 0; j < 3; j++) {
                if (j == 0) {
                    objectArray[i][j] = datos.get(i).getName_subject();
                }
                if (j == 1) {
                    objectArray[i][j] = datos.get(i).getHours();
                }

                if (j == 2) {
                    objectArray[i][j] = datos.get(i).getYear();
                }

            }

        }
        return objectArray;

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        CreateSubject createSubject = new CreateSubject();
        createSubject.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if ((subjectsTable.getSelectedRow()) != -1) {//se selecciono una fila
            SubjectServices gs = ServicesLocator.getSubjectServices();

            try {
                //obtengo todos los estudiantes
                ArrayList<SubjectDTO> asignaturas = gs.getAllSubjects();
                SubjectDTO asignaturaSeleccionado = asignaturas.get(subjectsTable.getSelectedRow());
                int id = asignaturaSeleccionado.getId();
                if (JOptionPane.showConfirmDialog(null, "Desea eliminar la " + asignaturaSeleccionado) == 0) {
                    if (gs.delete_object(id, StudentServices.DELETE_SUBJECT)) {
                        JOptionPane.showMessageDialog(null, "Asignatura eliminado correctamente");

                    } else {
                        JOptionPane.showMessageDialog(null, "Asignatura no fue eliminado correctamente");
                    }
                }
                //actualizar tabla subjects
                llenarSubjectsTable();
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió una excepción" + ex);
            }

        } else {//no se selecciono ninguna fila

            JOptionPane.showMessageDialog(null, "Seleccione una asignatura antes de intentar borrarlo");
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable subjectsTable;
    // End of variables declaration//GEN-END:variables

    private void llenarSubjectsTable() throws SQLException, ClassNotFoundException {

        SubjectServices ss = ServicesLocator.getSubjectServices();

        ArrayList<SubjectDTO> datos = ss.getAllSubjects();

        subjectsTable.setModel(new DefaultTableModel(subjectsToMatriz(datos),
                new String[]{"Nombre", "Horas", "Año académico"}));

    }

    private Object[][] subjectsToMatriz(ArrayList<SubjectDTO> datos) {

        // Convierte el ArrayList a Object[][]
        Object[][] objectArray = new Object[datos.size()][3];

        for (int i = 0; i < datos.size(); i++) {
            for (int j = 0; j < 3; j++) {
                if (j == 0) {
                    objectArray[i][j] = datos.get(i).getName_subject();
                }
                if (j == 1) {
                    objectArray[i][j] = datos.get(i).getHours();
                }
                if (j == 2) {
                    objectArray[i][j] = datos.get(i).getYear();
                }
            }

        }
        return objectArray;

    }
}
