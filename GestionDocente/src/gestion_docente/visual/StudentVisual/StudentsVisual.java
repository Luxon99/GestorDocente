/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gestion_docente.visual.StudentVisual;

import gestion_docente.dto.StudentDTO;
import gestion_docente.services.GroupServices;
import gestion_docente.services.ServicesLocator;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import gestion_docente.services.StudentServices;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hector
 */
public class StudentsVisual extends javax.swing.JPanel {

    /**
     * Creates new form EstudiantesVisual
     */
    private TableModel model;

    public StudentsVisual() {

        initComponents();
        try {
            llenarTablaStudents();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentsVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor =to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        studentsTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        studentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Surnames", "Sex", "Municipality", "Group"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(studentsTable);
        if (studentsTable.getColumnModel().getColumnCount() > 0) {
            studentsTable.getColumnModel().getColumn(0).setResizable(false);
            studentsTable.getColumnModel().getColumn(1).setResizable(false);
            studentsTable.getColumnModel().getColumn(2).setResizable(false);
            studentsTable.getColumnModel().getColumn(3).setResizable(false);
            studentsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton3.setText("Insertar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Eliminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Modificar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Actualizar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int fila = studentsTable.getSelectedRow();
        if (fila != -1) {//si selecciono a alguna fila

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        CreateStudent crearStudent = new CreateStudent();
        crearStudent.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Este metodo elimina de la base de datos el elemento seleccionado en la
     * tabla
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if ((studentsTable.getSelectedRow()) != -1) {//se selecciono una fila
            StudentServices ss = ServicesLocator.getStudentServices();

            try {
                //obtengo todos los estudiantes
                ArrayList<StudentDTO> estudiantes = ss.getAllStudents();
                StudentDTO estudianteSeleccionado = estudiantes.get(studentsTable.getSelectedRow());
                int id = estudianteSeleccionado.getId();
                if (JOptionPane.showConfirmDialog(null, "Desea eliminar al estudiante " + estudianteSeleccionado) == 0) {
                    if (ss.delete_object(id,StudentServices.DELETE_STUDENT)) {
                        JOptionPane.showMessageDialog(null, "Estudiante eliminado correctamente");

                    } else {
                        JOptionPane.showMessageDialog(null, "Estudiante no fue eliminado correctamente");
                    }
                }
                //actualizar tabla students
                llenarTablaStudents();
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió una excepción" + ex);
            }

        } else {//no se selecciono ninguna fila
            DeleteStudent ds = new DeleteStudent();
            ds.setVisible(true);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            llenarTablaStudents();
        } catch (SQLException ex) {
            Logger.getLogger(StudentsVisual.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentsVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    public void llenarTablaStudents() throws SQLException, ClassNotFoundException {
        StudentServices ss = ServicesLocator.getStudentServices();
        ArrayList<StudentDTO> datos = ss.getAllStudents();

        studentsTable.setModel(new DefaultTableModel(studentsToMatriz(datos),
                new String[]{"Nombre", "Apellidos", "Sexo", "Municipio", "Grupo"}));

    }

    /**
     * @param datos
     * @return 
     * @throws java.sql.SQLException
     * @auhtor Cesar Metodo que convierte un ArrayList<StudentDTO> a Object[][]
     */
    public Object[][] studentsToMatriz(ArrayList<StudentDTO> datos) throws SQLException {
        // Convierte el ArrayList a Object[][]
        Object[][] objectArray = new Object[datos.size()][5];

        for (int i = 0; i < datos.size(); i++) {
            for (int j = 0; j < 5; j++) {
                if (j == 0) {
                    objectArray[i][j] = datos.get(i).getName();
                }
                if (j == 1) {
                    objectArray[i][j] = datos.get(i).getSurnames();
                }
                if (j == 2) {
                    String sexo = "Femenino";
                    if (datos.get(i).isSex()) {
                        sexo = "Masculino";
                    }
                    objectArray[i][j] = sexo;
                }
                if (j == 3) {
                    objectArray[i][j] = datos.get(i).getMunicipality();
                }
                if (j == 4) {
                    GroupServices gs = ServicesLocator.getGroupServices();
                    objectArray[i][j] = gs.getGroup(datos.get(i).getId_group());
                }

            }

        }
        return objectArray;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable studentsTable;
    // End of variables declaration//GEN-END:variables
}
